{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js","img/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","_ref","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","_templateObject","bgImage","StyledTetris","_templateObject2","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","_useState","useState","_useState2","Object","slicedToArray","setStage","_useState3","_useState4","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","concat","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","StyledStage_templateObject","props","height","width","StyledCell","StyledCell_templateObject","type","React","memo","react_default","a","createElement","Stage","components_Cell","key","StyledDisplay","StyledDisplay_templateObject","gameOver","Display","text","StyledStartButton","button","StartButton_templateObject","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","_useState5","_useState6","touchStartY","setTouchStartY","_useState7","_useState8","touchEndY","setTouchEndY","_usePlayer","setPlayer","rotate","matrix","dir","mtrx","_","index","column","reverse","useCallback","STAGE_WIDTH","objectSpread","clonedPlayer","JSON","parse","stringify","offset","usePlayer","_usePlayer2","updatePlayerPos","playerRotate","_useStage","_useStage2","_useGameStatus","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","_useGameStatus2","tetrisWrapperRef","useRef","current","addEventListener","handleTouchStart","handleTouchEnd","removeEventListener","movePlayer","drop","console","log","dropPlayer","delay","savedCallback","id","setInterval","clearInterval","useInterval","event","touches","clientY","changedTouches","deltaY","role","tabIndex","onKeyDown","e","keyCode","move","onKeyUp","_ref2","onTouchStart","onTouchMove","onTouchEnd","components_Stage","components_Display","components_StartButton","App","className","components_Tetris","ReactDOM","render","src_App","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.6dbefc53.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () => Array(STAGE_WIDTH).fill([0, 'clear']));\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n  // THIS IS SLOWER!!!\n  // return player.tetromino.some((row, y) =>\n  //   row.some((cell, x) => {\n  //     if (cell !== 0) {\n  //       return (\n  //         !stage[y + player.pos.y + moveY] ||\n  //         !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n  //         stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n  //           'clear'\n  //       );\n  //     }\n  //     return false;\n  //   })\n  // );\n\n  // Using for loops to be able to return (and break). Not possible with forEach\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // 1. Check that we're on an actual Tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if (\n          // 2. Check that our move is inside the game areas height (y)\n          // That we're not go through bottom of the play area\n          !stage[y + player.pos.y + moveY] ||\n          // 3. Check that our move is inside the game areas width (x)\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n          // 4. Check that the cell wer'e moving to isn't set to clear\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n            'clear'\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n  // 5. If everything above is false\n  return false;\n};\n","import styled from 'styled-components';\n// BG Image\nimport bgImage from '../../img/bg.png';\n\nexport const StyledTetrisWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(${bgImage}) #000;\n  background-size: cover;\n  overflow: hidden;\n`;\n\nexport const StyledTetris = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 40px;\n  margin: 0 auto;\n  max-width: 900px;\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    display: block;\n    padding: 0 20px;\n  }\n`;\n","export const TETROMINOS = {\n  0: { shape: [[0]], color: '0, 0, 0' },\n  I: {\n    shape: [[0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0]],\n    color: '80, 227, 230',\n  },\n  J: { shape: [[0, 'J', 0], [0, 'J', 0], ['J', 'J', 0]], color: '36, 95, 223' },\n  L: {\n    shape: [[0, 'L', 0], [0, 'L', 0], [0, 'L', 'L']],\n    color: '223, 173, 36',\n  },\n  O: { shape: [['O', 'O'], ['O', 'O']], color: '223, 217, 36' },\n  S: { shape: [[0, 'S', 'S'], ['S', 'S', 0], [0, 0, 0]], color: '48, 211, 56' },\n  T: {\n    shape: [[0, 0, 0], ['T', 'T', 'T'], [0, 'T', 0]],\n    color: '132, 61, 198',\n  },\n  Z: { shape: [['Z', 'Z', 0], [0, 'Z', 'Z'], [0, 0, 0]], color: '227, 78, 78' },\n};\n\nexport const randomTetromino = () => {\n  const tetrominos = 'IJLOSTZ';\n  const randTetromino =\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\n  return TETROMINOS[randTetromino];\n};\n","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage =>\n      newStage.reduce((ack, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev + 1);\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          return ack;\n        }\n        ack.push(row);\n        return ack;\n      }, []);\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n      // Then check if we got some score if collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // Here are the updates\n    setStage(prev => updateStage(prev));\n  }, [\n    player.collided,\n    player.pos.x,\n    player.pos.y,\n    player.tetromino,\n    resetPlayer,\n  ]);\n\n  return [stage, setStage, rowsCleared];\n};\n","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n  display: grid;\n  grid-template-rows: repeat(\n    ${props => props.height},\n    calc(25vw / ${props => props.width})\n  );\n  grid-template-columns: repeat(${props => props.width}, 1fr);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  max-width: 25vw;\n  background: #111;\n`;\n","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n  width: auto;\n  /* border-radius: 5px; */\n  background: rgba(${props => props.color}, 0.8);\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n  border-bottom-color: rgba(${props => props.color}, 0.1);\n  border-right-color: rgba(${props => props.color}, 1);\n  border-top-color: rgba(${props => props.color}, 1);\n  border-left-color: rgba(${props => props.color}, 0.3);\n`;\n","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\nimport { TETROMINOS } from '../tetrominos';\n\n// React.memo makes sure we only re-render the changed cells\nconst Cell = ({ type }) => (\n  <StyledCell type={type} color={TETROMINOS[type].color}>\n \n  </StyledCell>\n);\n\nexport default React.memo(Cell);\n","import React from 'react';\nimport { StyledStage } from './styles/StyledStage';\n\nimport Cell from './Cell';\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n  </StyledStage>\n);\n\nexport default Stage;\n","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  color: ${props => (props.gameOver ? 'red' : '#999')};\n  background: #000;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n`;\n","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplay';\n\nconst Display = ({ gameOver, text }) => (\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n);\n\nexport default Display;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledStartButton = styled.button`\n  box-sizing: border-box;\n\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  color: white;\n  background: #333;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`;\n\nconst StartButton = ({ callback }) => (\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\n);\n\nexport default StartButton;\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport { createStage, checkCollision } from '../gameHelpers';\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n// Custom Hooks\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = () => {\n    const [dropTime, setDropTime] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\n    const [touchStartY, setTouchStartY] = useState(null);\n    const [touchEndY, setTouchEndY] = useState(null);\n\n\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n        rowsCleared\n    );\n\n    const tetrisWrapperRef = useRef(null);\n\n    useEffect(() => {\n        if (tetrisWrapperRef.current) {\n            tetrisWrapperRef.current.addEventListener('touchstart', handleTouchStart);\n            tetrisWrapperRef.current.addEventListener('touchend', handleTouchEnd);\n        }\n\n        return () => {\n            if (tetrisWrapperRef.current) {\n                tetrisWrapperRef.current.removeEventListener('touchstart', handleTouchStart);\n                tetrisWrapperRef.current.removeEventListener('touchend', handleTouchEnd);\n            }\n        };\n    }, [tetrisWrapperRef.current]);\n\n    const movePlayer = dir => {\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n            updatePlayerPos({ x: dir, y: 0 });\n        }\n    };\n\n    const startGame = () => {\n        // Reset everything\n        setStage(createStage());\n        setDropTime(1000);\n        resetPlayer();\n        setScore(0);\n        setLevel(0);\n        setRows(0);\n        setGameOver(false);\n    };\n\n    const drop = () => {\n        // Increase level when player has cleared 10 rows\n        if (rows > (level + 1) * 10) {\n            setLevel(prev => prev + 1);\n            // Also increase speed\n            setDropTime(1000 / (level + 1) + 200);\n        }\n\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n            updatePlayerPos({ x: 0, y: 1, collided: false });\n        } else {\n            // Game over!\n            if (player.pos.y < 1) {\n                console.log('GAME OVER!!!');\n                setGameOver(true);\n                setDropTime(null);\n            }\n            updatePlayerPos({ x: 0, y: 0, collided: true });\n        }\n    };\n\n    const dropPlayer = () => {\n        // We don't need to run the interval when we use the arrow down to\n        // move the tetromino downwards. So deactivate it for now.\n        setDropTime(null);\n        drop();\n    };\n\n    // This one starts the game\n    // Custom hook by Dan Abramov\n    useInterval(() => {\n        drop();\n    }, dropTime);\n\n    const move = ({ keyCode }) => {\n        if (!gameOver) {\n            if (keyCode === 37) {\n                movePlayer(-1);\n            } else if (keyCode === 39) {\n                movePlayer(1);\n            } else if (keyCode === 40) {\n                dropPlayer();\n            } else if (keyCode === 38) {\n                playerRotate(stage, 1);\n            }\n        }\n    };\n\n    const keyUp = ({ keyCode }) => {\n        if (!gameOver) {\n            // Activate the interval again when user releases down arrow.\n            if (keyCode === 40) {\n                setDropTime(1000 / (level + 1));\n            }\n        }\n    };\n\n    const handleTouchStart = event => {\n        setTouchStartY(event.touches[0].clientY);\n      };\n\n    const handleTouchMove = (event) => {\n        setTouchStartY(event.touches[0].clientY);\n    };\n\n    const handleTouchEnd = event => {\n        setTouchEndY(event.changedTouches[0].clientY);\n        const deltaY = touchEndY - touchStartY;\n    \n        if (deltaY > 0) {\n          dropPlayer();\n        } else if (deltaY < 0) {\n          playerRotate(stage, 1);\n        }\n      };\n\n    return (\n        <StyledTetrisWrapper\n            role=\"button\"\n            tabIndex=\"0\"\n            onKeyDown={e => move(e)}\n            onKeyUp={keyUp}\n            onTouchStart={handleTouchStart}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={handleTouchEnd}\n        >\n            <StyledTetris>\n                <Stage stage={stage} />\n                <aside>\n                    {gameOver ? (\n                        <Display gameOver={gameOver} text=\"Game Over\" />\n                    ) : (\n                        <div>\n                            <Display text={`Score: ${score}`} />\n                            <Display text={`rows: ${rows}`} />\n                            <Display text={`Level: ${level}`} />\n                        </div>\n                    )}\n                    <StartButton callback={startGame} />\n                </aside>\n            </StyledTetris>\n        </StyledTetrisWrapper>\n    );\n};\n\nexport default Tetris;\n","import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  function rotate(matrix, dir) {\n    // Make the rows to become cols (transpose)\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\n    // Reverse each row to get a rotaded matrix\n    if (dir > 0) return mtrx.map(row => row.reverse());\n    return mtrx.reverse();\n  }\n\n  function playerRotate(stage, dir) {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n    setPlayer(clonedPlayer);\n  }\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n\n  const linePoints = [40, 100, 300, 1200];\n\n  const calcScore = useCallback(() => {\n    // We have score\n    if (rowsCleared > 0) {\n      // This is how original Tetris score is calculated\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n\n  return [score, setScore, rows, setRows, level, setLevel];\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/bg.f8748107.png\";"],"sourceRoot":""}